<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>renderer2d</title>
		<style>
			canvas {
				image-rendering: pixelated;
			}
		</style>
  </head>
  <body>
    <canvas></canvas>
  </body>
</html>

<script>
import { AtlasType, createTexture } from '../../src'
import { createTransform2D, type MaybeWithTransform2D, type MaybeWithVelocity2D } from '../../src/components'
import { createGame, start } from '../../src/game'
import { createCamera2d, type MaybeWithCamera2D } from '../../src/prefabs'
import { type MaybeWithTexture2d, renderer2d } from '../../src/renderers/renderer2d'
import { assets, textures } from '../definitions'

type MyEntity = MaybeWithTransform2D & MaybeWithVelocity2D & MaybeWithCamera2D & MaybeWithTexture2d & {
	coin?: true
	square?: true
}

const { game, createScene } = createGame<MyEntity, typeof assets, typeof textures>({
	canvas: {
		element: document.querySelector('canvas')!,
		resizeMode: 'fill',
	},
	assets,
	textures,
})

const home = createScene('home', (context) => {
	const { textures, assets, spawn } = context

	const size = 30
	assets.square.loader.onLoad((context) => {
		const { canvas } = context

		canvas.width = size
		canvas.height = size

		context.fillStyle = 'red'
		context.strokeStyle = 'black'
		context.fillRect(1, 1, size - 1, size - 1)
		context.strokeRect(1, 1, size - 1, size - 1)
	})

	const squareTexture = createTexture({
		atlas: {
			type: AtlasType.Single,
			region: {
				width: size,
				height: size,
			},
		},
		asset: assets.square,
	})

	spawn('square', {
		square: true,
		transform2D: createTransform2D({
			position: { x: 10, y: 10 },

		}),
		texture2D: squareTexture,
	})

	spawn('coin', {
		coin: true,
		transform2D: createTransform2D({
			position: { x: 50, y: 10 },
		}),
		texture2D: textures.coin,

	})

	spawn('camera', createCamera2d({}))

	return {
		systems: [
			...renderer2d.systems,
		],
	}
})

start(game, home)
</script>
