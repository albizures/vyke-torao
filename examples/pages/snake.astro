<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>snake</title>
		<style>
			body {
				margin: 0;
				padding: 0;
				display: flex;
				justify-content: center;
				align-items: center;
				height: 100vh;
				background-color: #f0f0f0;
				overflow: hidden;
			}
			canvas {
				width: 100%;
				height: 100%;
			}
		</style>
	</head>
	<body>
		<canvas style="border: 1px solid black"></canvas>
	</body>
</html>

<script>
import type { InferWith } from '../../src'
import type { SystemContext } from '../../src/ecs'
import type { Vec2d } from '../../src/vec'
import { createDirector, createGame } from '../../src'
import { Velocity2dEntity } from '../../src/components'
import { defineEntity, defineQuery, identity, Systems, SystemType } from '../../src/ecs'
import { Canvas2dEntity, createCamera2d, createCanvas2d, Transform2dEntity } from '../../src/plugins/canvas2d'
import { createEnterExit, EnterExitEntity } from '../../src/plugins/enter-exit'
import { assets } from '../definitions'

const canvas2d = createCanvas2d({
	element: document.querySelector('canvas')!,
	resizeMode: 'fill',
})

type WithDirection = InferWith<typeof entity.direction>

type TailArgs = {
	position: Vec2d
	direction: DirectionType
	follow: string
}

const entity = defineEntity({
	borderBehavior: identity<'wrap' | 'die'>(),
	gridSize: identity<Vec2d>(),
	headPosition: identity<Vec2d>(),
	tail: identity<TailArgs>(),
	direction: identity<DirectionType>(),
	prevPosition: identity<Vec2d>(),
	...Velocity2dEntity,
	...Transform2dEntity,
	...EnterExitEntity,
	...Canvas2dEntity,
})

const INITIAL_SIZE = 4
const GRID_SIZE = 20
const CELL_SIZE = 10
const VELOCITY = 2

enum DirectionType {
	Up = 0,
	Down = 1,
	Left = 2,
	Right = 3,
}

const game = createGame({
	plugins: [canvas2d],
})

const director = createDirector<{
	home: never
}>(game)

const allHeads = defineQuery({
	id: 'all-heads',
	with: [
		entity.headPosition,
		entity.transform2d,
		entity.borderBehavior,
		entity.prevPosition,
		entity.velocity2d,
		entity.direction,
	],
})

const allTails = defineQuery({
	id: 'all-tails',
	with: [entity.tail, entity.transform2d, entity.prevPosition],
})

const allGrids = defineQuery({
	id: 'all-grids',
	with: [
		entity.gridSize,
		entity.transform2d,
	],
})

function move(context: SystemContext) {
	const { select } = context

	for (const item of select(allHeads)) {
		const { direction, velocity2d, headPosition } = item

		switch (direction) {
			case DirectionType.Up:

				headPosition.y -= velocity2d.y
				break
			case DirectionType.Down:
				headPosition.y += velocity2d.y
				break
			case DirectionType.Left:
				headPosition.x -= velocity2d.x
				break
			case DirectionType.Right:
				headPosition.x += velocity2d.x
				break
		}
	}
}

function snapToGrid(context: SystemContext) {
	const { select } = context

	const offset = select(allGrids).first()!.transform2d.position

	for (const item of select(allHeads)) {
		const { transform2d, headPosition, prevPosition } = item
		const position = transform2d.position

		const inGridX = headPosition.x + offset.x
		const inGridY = headPosition.y + offset.y

		const x = Math.round(inGridX / CELL_SIZE) * CELL_SIZE
		const y = Math.round(inGridY / CELL_SIZE) * CELL_SIZE

		if (x !== position.x || y !== position.y) {
			prevPosition.x = position.x
			prevPosition.y = position.y
			position.x = x
			position.y = y
		}
	}
}

function borderBehavior(context: SystemContext) {
	const { select } = context
	const { gridSize } = select(allGrids).first()!

	const canvasSize = {
		x: gridSize.x * GRID_SIZE,
		y: gridSize.y * GRID_SIZE,
	}

	for (const item of select(allHeads)) {
		const { borderBehavior, headPosition } = item

		if (borderBehavior === 'die') {
			continue
		}

		if (headPosition.x <= 0) {
			headPosition.x = canvasSize.x - CELL_SIZE
		}
		else if (headPosition.x > canvasSize.x - CELL_SIZE) {
			headPosition.x = 0
		}

		if (headPosition.y <= 0) {
			headPosition.y = canvasSize.y - CELL_SIZE
		}
		else if (headPosition.y > canvasSize.y - CELL_SIZE) {
			headPosition.y = 0
		}
	}
}

function followSystem(context: SystemContext) {
	const { select, getEntity } = context

	for (const item of select(allTails)) {
		const { tail: tailValues, transform2d, prevPosition } = item
		const { follow } = tailValues

		const followPrevPosition = getEntity(follow)?.prevPosition
		const position = transform2d.position

		if (followPrevPosition && (followPrevPosition.x !== position.x || followPrevPosition.y !== position.y)) {
			prevPosition.x = position.x
			prevPosition.y = position.y
			position.x = followPrevPosition!.x
			position.y = followPrevPosition!.y
		}
	}
}

const enterExit = createEnterExit({
	enter: (context) => {
		function onKeyDown(event: KeyboardEvent) {
			const { select, update } = context

			for (const head of select(allHeads)) {
				const { direction } = head
				const newDirection = getNewDirection(head, event.key)
				if (newDirection !== direction) {
					update(head, 'direction', newDirection)
				}
			}
		}

		document.addEventListener('keydown', onKeyDown)

		return () => {
			document.removeEventListener('keydown', onKeyDown)
		}
	},
})

director.scene('home', {
	entity,
	systems: Systems(
		[SystemType.FixedUpdate, move],
		[SystemType.FixedUpdate, snapToGrid],
		[SystemType.FixedUpdate, borderBehavior],
		[SystemType.FixedUpdate, followSystem],
	),
	plugins: [
		enterExit.scene,
	],
	enter(context) {
		const { spawn } = context
		const strokeSize = 2
		const gridSize = GRID_SIZE * CELL_SIZE + strokeSize
		const gridSprite = entity.sprite({
			asset: assets.grid,
			region: {
				width: gridSize,
				height: gridSize,
			},
		})

		assets.grid.use.then((asset) => {
			const context = asset.value
			const { canvas } = context

			canvas.width = gridSize
			canvas.height = gridSize

			context.strokeStyle = 'red'
			context.strokeRect(1, 1, gridSize - strokeSize, gridSize - strokeSize)
		})

		const sprite = entity.sprite({
			asset: assets.square,
			region: {
				width: CELL_SIZE,
				height: CELL_SIZE,
			},
		})

		assets.square.use.then((asset) => {
			const { value: context } = asset
			const { canvas } = context

			canvas.width = CELL_SIZE
			canvas.height = CELL_SIZE

			context.fillStyle = 'green'
			context.fillRect(0, 0, CELL_SIZE, CELL_SIZE)
		})

		spawn('grid', {
			gridSize: entity.gridSize({ x: CELL_SIZE, y: CELL_SIZE }),
			transform2d: entity.transform2d({ position: { x: 20, y: 20 } }),
			sprite: gridSprite,
		})

		const startX = 80

		spawn('head', {
			headPosition: entity.headPosition({ x: startX, y: 20 }),
			borderBehavior: entity.borderBehavior('wrap'),
			velocity2d: { x: VELOCITY, y: VELOCITY },
			transform2d: entity.transform2d({
				position: { x: startX + CELL_SIZE, y: 30 },
			}),
			prevPosition: { x: startX, y: 30 },
			direction: DirectionType.Right,
			sprite,
		})

		let follow = 'head'

		for (let index = 0; index < INITIAL_SIZE; index++) {
			const currentId = `tail-${index}`
			spawn(currentId, {
				tail: {
					position: {
						x: startX - ((index + 1) * CELL_SIZE) + CELL_SIZE,
						y: 20,
					},
					direction: DirectionType.Right,
					follow,
				},
				transform2d: entity.transform2d({
					position: {
						x: startX - (index * CELL_SIZE),
						y: 30,
					},
				}),
				prevPosition: {
					x: startX - ((index - 1) * CELL_SIZE),
					y: 30,
				},
				sprite,
			})
			follow = currentId
		}

		spawn('camera', createCamera2d())
	},
})

function getNewDirection(entity: WithDirection, keydown: string): DirectionType {
	const { direction } = entity
	switch (keydown) {
		case 'ArrowUp':
			if (direction !== DirectionType.Down) {
				return DirectionType.Up
			}
			break
		case 'ArrowDown':
			if (direction !== DirectionType.Up) {
				return DirectionType.Down
			}
			break
		case 'ArrowLeft':
			if (direction !== DirectionType.Right) {
				return DirectionType.Left
			}
			break
		case 'ArrowRight':
			if (direction !== DirectionType.Left) {
				return DirectionType.Right
			}
			break
	}

	return direction
}

director.start('home')
</script>
